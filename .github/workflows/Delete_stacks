name: Deploy stacks and load balancers created later
on:
 workflow_dispatch:

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: Find VPC ID
      run: |
        VPC_id=$(aws ec2 describe-vpcs --filters "Name=cidr,Values=10.0.0.0/16" --query "Vpcs[*].VpcId" --output text)
        echo "VPC_id=$VPC_id" >> $GITHUB_ENV

    - name: List Security Groups
      id: list_sg
      run: |
        aws ec2 describe-security-groups --filters "Name=vpc-id,Values=${{ env.VPC_id }}" --query "SecurityGroups[*].{Name:GroupName,Id:GroupId}" --output json > security_groups.json

    - name: Remove Rules and Delete Security Group
      run: |
        sg_id=$(jq -r '.[] | select(.Name=="default") | .Id' security_groups.json)
        if [ -n "$sg_id" ]; then
          echo "Removing rules from security group: $sg_id"
          aws ec2 revoke-security-group-ingress --group-id $sg_id --protocol all --port all --cidr 0.0.0.0/0
          aws ec2 revoke-security-group-egress --group-id $sg_id --protocol all --port all --cidr 0.0.0.0/0
          echo "Deleting security group: $sg_id"
          aws ec2 delete-security-group --group-id $sg_id
        else
          echo "No default security group found."
        fi

    - name: List and Delete Load Balancers
      run: |
        # List all load balancers
        load_balancers=$(aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text)
        
        # Delete each load balancer
        for lb in $load_balancers; do
          echo "Deleting load balancer: $lb"
          aws elb delete-load-balancer --load-balancer-name $lb
        done

    - name: Delete EKS Stack
      run: |
        echo "Deleting EKS stack..."
        aws cloudformation delete-stack --stack-name MyEKSCluster

        echo "Waiting for EKS stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name MyEKSCluster

    - name: Delete Bastion Stack
      run: |
        echo "Deleting Bastion stack..."
        aws cloudformation delete-stack --stack-name BastionHostStack

        echo "Waiting for Bastion stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name BastionHostStack
       
        
