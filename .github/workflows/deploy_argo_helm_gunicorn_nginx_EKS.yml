name: Deploy to Argo CD on EKS
on:
 workflow_dispatch:

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: write
      
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}
             
    - name: Get Bastion Host Public IP
      id: bastion_ip
      run: |
        bastion_ip=$(aws cloudformation describe-stacks --stack-name BastionHostStack --query "Stacks[0].Outputs[?OutputKey=='BastionPublicIP'].OutputValue" --output text)
        echo "::set-output name=ip::$bastion_ip"

    - name: Create SSH key file
      run: |
        echo "${{ secrets.SSH_KEY }}" > key.pem
        chmod 600 key.pem

    - name: SSH to Bastion Host and Update Kubeconfig
      env:
        BASTION_IP: ${{ steps.bastion_ip.outputs.ip }}
      run: |
        ssh -o StrictHostKeyChecking=no -i key.pem ec2-user@$BASTION_IP << EOF
          set -x  # Enable command tracing
          aws eks update-kubeconfig --region ${{ secrets.REGION }} --name MyEKSCluster
          kubectl get nodes
          kubectl create namespace argocd
          kubectl create namespace my-app-test
          #Retrieve EKS Endpoint
          echo "Waiting for an EKS Endpoint to be ready..."
          while ! eks_endpoint=$(aws eks describe-cluster --name MyEKSCluster --query "cluster.endpoint" --output text); do
          echo "An EKS Endpoint is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          echo "EKS Endpoint: $eks_endpoint"
          # update a yaml file after download it
          echo "Waiting for uploading a yaml file for an argo application to be ready..."
          while ! wget https://raw.githubusercontent.com/ruihukuang/Argo_Helm_Xgboost_EKS/main/my-app-argo-app.yaml; do
          echo "A yaml file for an argo application is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          sudo chmod 755 my-app-argo-app.yaml
          sudo sed -i "s|server: '.*'|server: '$eks_endpoint'|" my-app-argo-app.yaml

          output=$(aws ecr-public describe-images --repository-name my_repo_xgboost_test --region us-east-1 )
          matching_images=$(echo "$output" | jq -r '.imageDetails[].imageTags[] | select(endswith("_xgboost"))')
          sudo sed -i "s|value: public.ecr.aws/v3z5t7a3/my_repo_xgboost_test:'.*'|value: public.ecr.aws/v3z5t7a3/my_repo_xgboost_test:'$matching_images'|" my-app-argo-app.yaml
       
          echo "YAML file updated successfully."
          #Install Argo CLI
          sudo curl -sSL -o /usr/local/bin/argocd https://github.com/argoproj/argo-cd/releases/latest/download/argocd-linux-amd64
          sudo chmod +x /usr/local/bin/argocd
          # install helm 
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
          sudo chmod 700 get_helm.sh
          ./get_helm.sh
          #Add the Argo CD Helm Repository
          helm repo add argo https://argoproj.github.io/argo-helm
          helm repo update
          #Install Argo CD Using Helm
          helm install argocd argo/argo-cd --namespace argocd --create-namespace
          # Wait for argocd-server to be deployed 
          echo "Waiting for argocd-server to be ready..."
          while ! kubectl get deployment argocd-server -n argocd -o jsonpath='{.status.readyReplicas}' | grep -q '1'; do
          echo "argocd-server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # expose Argo CD API Server via an AWS Load Balancer, modify the argocd-server service.
          echo "Wait a few minutes for the Load Balancer of Argo CD API Server to provision"
          while ! kubectl patch svc argocd-server -n argocd --type='merge' -p '{"spec": {"type": "LoadBalancer"}}' ; do
          echo "Load Balancer of Argo CD API Server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Get the Load Balancer of Argo CD API Server URL
          Argo_URL= $(kubectl get svc argocd-server -n argocd -o jsonpath='{.status.loadBalancer.ingress[0].hostname}')
          # Access the Argo CD UI and get the password  
          Argo_OriginPW=$(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d)
          # Log into Argo with an originial password
          echo "Wait a few minutes to log into argo with an original password"
          while ! argocd login $Argo_URL --username admin --password $Argo_OriginPW --insecure; do
          echo "An original password login for argo is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Update password in Argo CD 
          echo "Wait a few minutes to update a password for argo"
          while ! argocd account update-password --current-password $Argo_OriginPW --new-password ${{ secrets.ARGOCD_NEW_PASSWORD }} ; do
          echo "A new password update for argo is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # Log into Argo with a new password 
          echo "Wait a few minutes to log into argo with a new password"
          while ! argocd login Argo_URL --username admin --password ${{ secrets.ARGOCD_NEW_PASSWORD }} ; do
          echo "A new password login for argo is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          # retrieve the name of the current Kubernetes context
          ContextName=$(kubectl config current-context)
          # Add a cluster into argo 
          echo "Wait a few minutes to add a cluster into argo"
          while ! argocd cluster add $ContextName --yes; do
          echo "Adding a cluster into argo is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done        
          # Apply Argo CD Application
          echo "Waiting for an Argo CD application to be ready..."
          while ! kubectl apply -f my-app-argo-app.yaml; do
          echo "an Argo CD application is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          #Install metrics-server
          kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/latest/download/components.yaml
          echo "Waiting for metrics-server to be ready..."
          while ! kubectl get deployment metrics-server -n kube-system -o jsonpath='{.status.readyReplicas}' | grep -q '1'; do
          echo "Metrics Server is not ready yet. Sleeping for 10 seconds..."
          sleep 10
          done
          echo "Metrics Server is ready!"
          kubectl top nodes
          kubectl top pods --all-namespaces 
        EOF
# kubectl get svc nginx-service -n my-app-test -o jsonpath='{.status.loadBalancer.ingress[0].hostname}' URL of load balancer for nginx
