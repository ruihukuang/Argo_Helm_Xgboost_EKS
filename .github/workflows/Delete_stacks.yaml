name: Deploy stacks and load balancers created later
on:
 workflow_dispatch:

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: List and Delete Load Balancers
      run: |
        # List all load balancers
        load_balancers=$(aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text)
        
        # Delete each load balancer
        for lb in $load_balancers; do
          echo "Deleting load balancer: $lb"
          aws elb delete-load-balancer --load-balancer-name $lb
        done

    - name: Find VPC ID
      run: |
        VPC_id=$(aws ec2 describe-vpcs --filters "Name=cidr,Values=10.0.0.0/16" --query "Vpcs[*].VpcId" --output text)
        echo "VPC_id=$VPC_id" >> $GITHUB_ENV

    - name: List Security Groups
      id: list_sg
      run: |
        aws ec2 describe-security-groups --filters "Name=vpc-id,Values=${{ env.VPC_id }}" --query "SecurityGroups[*].{Name:GroupName,Id:GroupId}" --output json > security_groups.json
    
    - name: Remove Rules and Delete Security Groups
      run: |
        sg_ids=$(jq -r '.[] | select(.Name!="default" and (.Description | contains("my-app-test/nginx-service") or contains("argocd/argocd-server"))) | .Id' security_groups.json)
        for sg_id in $sg_ids; do
          if [ -n "$sg_id" ]; then
            echo "Checking rules for security group: $sg_id"

            # Check and remove inbound rules
            inbound_rules=$(aws ec2 describe-security-groups --group-ids $sg_id --query "SecurityGroups[0].IpPermissions" --output json)
            if [ "$inbound_rules" != "[]" ]; then
              echo "Removing inbound rules from security group: $sg_id"
              aws ec2 revoke-security-group-ingress --group-id $sg_id --protocol all --port all --cidr 0.0.0.0/0 || true
            else
              echo "No inbound rules to remove."
            fi

            # Check and remove outbound rules
            outbound_rules=$(aws ec2 describe-security-groups --group-ids $sg_id --query "SecurityGroups[0].IpPermissionsEgress" --output json)
            if [ "$outbound_rules" != "[]" ]; then
              echo "Removing outbound rules from security group: $sg_id"
              aws ec2 revoke-security-group-egress --group-id $sg_id --protocol all --port all --cidr 0.0.0.0/0 || true
            else
              echo "No outbound rules to remove."
            fi

            # Delete the security group
            echo "Deleting security group: $sg_id"
            aws ec2 delete-security-group --group-id $sg_id
          else
            echo "No non-default security group found."
          fi
        done
        
    - name: Delete EKS Stack
      run: |
        echo "Deleting EKS stack..."
        aws cloudformation delete-stack --stack-name MyEKSCluster

        echo "Waiting for EKS stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name MyEKSCluster

    - name: Delete Bastion Stack
      run: |
        echo "Deleting Bastion stack..."
        aws cloudformation delete-stack --stack-name BastionHostStack

        echo "Waiting for Bastion stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name BastionHostStack
       
        
