name: Delete stacks and load balancers/security groups created later
on:
 workflow_dispatch:

permissions:
      id-token: write   # This is required for requesting the JWT
      contents: read 
jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
         role-to-assume: arn:aws:iam::${{ secrets.ACCOUNT_ID }}:role/${{ secrets.ROLE_NAME }}
         aws-region: ${{ secrets.REGION }}

    - name: List and Delete Load Balancers
      run: |
        # List all load balancers
        load_balancers=$(aws elb describe-load-balancers --query 'LoadBalancerDescriptions[*].LoadBalancerName' --output text)
        
        # Delete each load balancer
        for lb in $load_balancers; do
          echo "Deleting load balancer: $lb"
          aws elb delete-load-balancer --load-balancer-name $lb
        done

    - name: Delete Bastion Stack
      run: |
        echo "Deleting Bastion stack..."
        aws cloudformation delete-stack --stack-name BastionHostStack

        echo "Waiting for Bastion stack deletion to complete..."
        aws cloudformation wait stack-delete-complete --stack-name BastionHostStack

    - name: Attempt to Delete CloudFormation Stack
      id: delete_stack
      run: |
         set -e
         echo "Attempting to delete CloudFormation stack..."
         if ! aws cloudformation delete-stack --stack-name MyEKSCluster; then
           echo "Failed to delete CloudFormation stack."
           exit 1
         fi
         echo "Waiting for CloudFormation stack deletion to complete..."
         aws cloudformation wait stack-delete-complete --stack-name MyEKSCluster
         echo "CloudFormation stack deleted successfully."

    - name: Remove Security Group if Stack Deletion Fails
      if: failure()
      run: |
        echo "Searching for security groups with specific descriptions and names not equal to 'default'..."
          
        # Fetch security groups matching the criteria
        security_groups=$(aws ec2 describe-security-groups --query "SecurityGroups[?(contains(Description, 'my-app-test/nginx-service') || contains(Description, 'argocd/argocd-server')) && GroupName != 'default'].GroupId" --output text)
          
        # Loop through each security group and delete it
        for sg in $security_groups; do
          echo "Deleting security group: $sg"
          aws ec2 delete-security-group --group-id $sg || echo "Failed to delete security group: $sg"
        done

    - name: Retry Deleting CloudFormation Stack
      if: failure()
      run: |
          echo "Retrying to delete CloudFormation stack..."
          if ! aws cloudformation delete-stack --stack-name MyEKSCluster; then
            echo "Failed to delete CloudFormation stack on retry."
            exit 1
          fi
          echo "Waiting for CloudFormation stack deletion to complete on retry..."
          aws cloudformation wait stack-delete-complete --stack-name MyEKSCluster
          echo "CloudFormation stack deleted successfully on retry."        
